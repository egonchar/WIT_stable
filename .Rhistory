GT_econ_salaries$TITLE <- str_to_title(GT_econ_salaries$TITLE)
acaProf <- c("Acad Professional Ac Senior", "Academic Professional Ac", "Academic Services Professional" )
itProf <- c("It Network Support Para/Pro", "It Network Support Professional", "It Professional", "It Technical/Paraprofessional")
adminProf <- c("Admin Specialist/Coordinator", "Administrative Specialist/Coor")
GT_econ_salaries <- GT_econ_salaries %>%
mutate(TITLE = ifelse(TITLE %in% acaProf, "Academic Professional", TITLE)) %>%
mutate(TITLE = ifelse(TITLE %in% itProf, "IT Professional", TITLE)) %>%
mutate(TITLE = ifelse(TITLE %in% adminProf, "Administrative Specialist/Coordinator", TITLE)) %>%
mutate(TITLE = ifelse(TITLE == "Marketing/Pr Parapro/Pro", "Marketing/PR Paraprofessional", TITLE))
GT_econ_salaries$FISCAL_YEAR <- as.numeric(GT_econ_salaries$FISCAL_YEAR)
GT_econ_salaries <- GT_econ_salaries %>%
filter(NAME != "DEO,CHAITANYA SURESH") %>%
filter(!(NAME == "HUGHES,DANNY RAY" & FISCAL_YEAR == 2023))
df <- GT_econ_salaries %>% filter(curious == 1) %>% filter(chair == 0)
# ggplot( data = df, aes(x = FISCAL_YEAR, y = SALARY2)) +
#   # facet_grid(cols = vars(TITLE)) +
#   geom_point( aes(color = TITLE)) +
#   geom_vline(xintercept = 2017, linetype = "dashed")
group_means_df <- setNames(
stats::aggregate(SALARY2 ~ TITLE + FISCAL_YEAR, df, mean),
c("TITLE", "FISCAL_YEAR","SALARY2")
)
# Example plot
ggplot(mapping = aes(x = FISCAL_YEAR, y = SALARY2, group = TITLE)) +
geom_vline(xintercept = 2017, linetype = "dashed", color = "gray", size = 1) +
geom_line(data = group_means_df, aes(color = TITLE), size = 3, alpha = 0.3) +  # Add color aesthetic to line
geom_point(data = df, aes(color = TITLE), size = 2) +  # Color aesthetic already included
scale_y_continuous(labels = function(x) paste0("$", x, "k")) +  # Y-axis label formatting
scale_colour_brewer(palette = "Dark2") +  # Define a color palette for both lines and points
labs(title = "Annual Salary by Position Title",
x = "Fiscal Year",
y = "Annual Salary",
color = "Position Title") +
theme_classic(base_size = 18)
profs <- df %>% filter(TITLE == "Professor")
test <- GT_econ_salaries %>%
filter(curious == 0)
table(test$TITLE)
table(test$econ)
chair <- GT_econ_salaries %>% filter(chair == 1)
ggplot( data = chair, aes(x = FISCAL_YEAR, y = SALARY2)) +
# facet_grid(cols = vars(TITLE)) +
scale_colour_brewer("Chair", palette = "Dark2") +  # Define a color palette for both lines and points
geom_line(color = "#7570b3") +
geom_vline(xintercept = 2017, linetype = "dashed") +
scale_y_continuous(labels = function(x) paste0("$", x, "k")) +  # Y-axis label formatting
labs(title = "Annual Salary of the Economics Department Chair",
x = "Fiscal Year",
y = "Annual Salary",
color = "Position Title") +
theme_classic(base_size = 18)
df <- GT_econ_salaries %>% filter(curious == 1) %>% filter(chair == 0)
# ggplot( data = df, aes(x = FISCAL_YEAR, y = SALARY2)) +
#   # facet_grid(cols = vars(TITLE)) +
#   geom_point( aes(color = TITLE)) +
#   geom_vline(xintercept = 2017, linetype = "dashed")
group_means_df <- setNames(
stats::aggregate(SALARY2 ~ TITLE + FISCAL_YEAR, df, mean),
c("TITLE", "FISCAL_YEAR","SALARY2")
)
# Example plot
ggplot(mapping = aes(x = FISCAL_YEAR, y = SALARY2, group = TITLE)) +
geom_vline(xintercept = 2017, linetype = "dashed", color = "gray", size = 1) +
geom_line(data = group_means_df, aes(color = TITLE), size = 3, alpha = 0.3) +  # Add color aesthetic to line
geom_point(data = df, aes(color = TITLE), size = 2) +  # Color aesthetic already included
scale_y_continuous(labels = function(x) paste0("$", x, "k")) +  # Y-axis label formatting
scale_colour_brewer(palette = "Dark2") +  # Define a color palette for both lines and points
labs(title = "Annual Salary by Position Title",
x = "Fiscal Year",
y = "Annual Salary",
color = "Position Title") +
theme_classic(base_size = 18)
profs <- df %>% filter(TITLE == "Professor")
test <- GT_econ_salaries %>%
filter(curious == 0)
table(test$TITLE)
table(test$econ)
chair <- GT_econ_salaries %>% filter(chair == 1)
ggplot( data = chair, aes(x = FISCAL_YEAR, y = SALARY2)) +
# facet_grid(cols = vars(TITLE)) +
scale_colour_brewer("Chair", palette = "Dark2") +  # Define a color palette for both lines and points
geom_line(color = "#7570b3") +
geom_vline(xintercept = 2017, linetype = "dashed") +
scale_y_continuous(labels = function(x) paste0("$", x, "k")) +  # Y-axis label formatting
labs(title = "Annual Salary of the Economics Department Chair",
x = "Fiscal Year",
y = "Annual Salary",
color = "Position Title") +
theme_classic(base_size = 18)
# Example plot
ggplot(mapping = aes(x = FISCAL_YEAR, y = SALARY2, group = TITLE)) +
geom_vline(xintercept = 2017, linetype = "dashed", color = "gray", size = 1) +
geom_line(data = group_means_df, aes(color = TITLE), size = 3, alpha = 0.3) +  # Add color aesthetic to line
geom_point(data = df, aes(color = TITLE), size = 2) +  # Color aesthetic already included
scale_y_continuous(labels = function(x) paste0("$", x, "k")) +  # Y-axis label formatting
scale_colour_brewer(palette = "Dark2") +  # Define a color palette for both lines and points
labs(title = "Annual Salary by Position Title",
x = "Fiscal Year",
y = "Annual Salary",
color = "Position Title") +
theme_classic(base_size = 18)
df <- GT_econ_salaries %>% filter(econ == "Faculty" | econ == "Chair") %>%
mutate(TITLE = ifelse(econ == "Chair", "Department Chair", TITLE))
check <- df %>%
group_by(TITLE) %>%
summarize(freq = n()) %>%
ungroup() %>%
filter(freq > 2) %>%
select(TITLE)
df2 <- df %>%
filter(TITLE %in% check$TITLE)
group_means_df <- setNames(
stats::aggregate(SALARY2 ~ TITLE + FISCAL_YEAR, df2, mean),
c("TITLE", "FISCAL_YEAR","SALARY2")
)
# Example plot
ggplot(mapping = aes(x = FISCAL_YEAR, y = SALARY2, group = TITLE)) +
geom_vline(xintercept = 2017, linetype = "dashed", color = "gray", size = 1) +
geom_line(data = group_means_df, aes(color = TITLE), size = 3, alpha = 0.4) +  # Add color aesthetic to line
geom_point(data = df2, aes(color = TITLE), size = 2) +  # Color aesthetic already included
scale_y_continuous(labels = function(x) paste0("$", x, "k")) +  # Y-axis label formatting
scale_colour_brewer(palette = "Dark2") +  # Define a color palette for both lines and points
labs(title = "Annual Salary by Position Title",
x = "Fiscal Year",
y = "Annual Salary",
color = "Position Title") +
theme_classic(base_size = 19)
# Example plot
ggplot(mapping = aes(x = FISCAL_YEAR, y = SALARY2, group = TITLE)) +
geom_vline(xintercept = 2017, linetype = "dashed", color = "gray", size = 1) +
geom_line(data = group_means_df, aes(color = TITLE), size = 3, alpha = 0.4) +  # Add color aesthetic to line
geom_point(data = df2, aes(color = TITLE), size = 2) +  # Color aesthetic already included
scale_y_continuous(labels = function(x) paste0("$", x, "k")) +  # Y-axis label formatting
scale_colour_brewer(palette = "Dark2") +  # Define a color palette for both lines and points
labs(title = "Annual Salary of Economic's Faculty by Position Title",
x = "Fiscal Year",
y = "Annual Salary",
color = "Position Title") +
theme_classic(base_size = 19)
install.packages(c("DBI", "knitr", "RcppArmadillo", "rlang", "SparseM", "xts"))
ui <- fluidPage(
theme = light,
dashboardHeader(
title = title
),
useShinyjs(),
includeScript("./www/getIP.js"),
htmltools::includeScript("./www/popover.js"),
htmltools::includeCSS("./www/popover.css"),
div(
id = "custom-content",
style = "width: 100%; padding: 15px; align: left; ", # background-color: #f7f7f7; border: 1px solid #45a3a4; border-radius: 10px !important;
tags$div(style = "font-weight: bold; font-size: 22px; color: #45a3a4;", "Welcome to the Workforce Insights Tool"),
tags$br(),
tags$div(
style = "text-align: left; font-size: 18px;",
"If you would like more information on how to use this tool, please review our user guide."
),
tags$br(),
tags$div(
style = "text-align: left; font-size: 18px;",
" Click ",
a("here", href = "https://docs.google.com/document/d/e/2PACX-1vRy62p-noZjNGHpTPvmS_lw2HuY86Mr2WJNg0B-pUoOmV_y67XNocPRarxgbyNCgQ/pub", class = "btn btn-doc", target = "_blank"),
" to access the user guide."
)
),
HTML("<br>"),
sidebarLayout(
sidebarPanel(
sidebarUI("sidebar1")
),
mainPanel(
class = "main",
dashboardBody(
# Accordion structure
accordion(
open = c("Unweighted Survival Function Graph"),
# Second accordion item: survival function graph
accordion_panel(
title = "Unweighted Survival Function Graph",
conditionalPanel(
condition = "input.run_analysis > 0",
h5(textOutput("survival_text"), align = "left"),
withSpinner(plotOutput("cdf_graph_plot", click = "plot_click", width = "100%", height = "400px"), color = "#45a3a4", type = 8),
p(textOutput("plot_info"), id = "plot_info", style = "text-align: left;"),
conditionalPanel(
condition = "output.plotLoaded",
HTML("<br>"),
div(style = "text-align: center;", downloadButton('downloadPlot', 'Download Survival Plot')),
HTML("<br>")
)
)
)
),
br(),
accordion(
open = c("Weighted Survival Function Graph"),
accordion_panel(
title = "Weighted Survival Function Graph",
conditionalPanel(
condition = "input.run_analysis",
h4(textOutput("weighted_survival_header_nat"), style = "text-align: center; font-weight: bold;"),
h5(textOutput("weighted_survival_text"), align = "left"),
withSpinner(plotOutput("cdf_graph_weighted_plot", click = "plot_click2", width = "100%", height = "400px"), color = "#45a3a4", type = 8),
p(textOutput("weighted_plot_info"), id = "weighted_plot_info", style = "text-align: left;"),
conditionalPanel(
condition = "output.cdf_graph_weighted_plot",
HTML("<br>"),
div(style = "text-align: center;", downloadButton('downloadPlot_weighted', 'Download Weighted Survival Plot', class = "btn download.button")),
HTML("<br>"),
),
HTML("<hr>"),
HTML("<br>"),
h4(textOutput("weighted_survival_header_GEO"), style = "text-align: center; font-weight: bold;"),
withSpinner(uiOutput("location_dropdown2_GEO_ui", style = "text-align: left; display: block; margin: auto;"), color = "#45a3a4", type = 8),
conditionalPanel(
condition = "output.location_dropdown2_GEO_ui",
HTML("<br>"),
h5(textOutput("weighted_survival_GEO_text"), align = "left"),
withSpinner(plotOutput("cdf_graph_weighted_plot_GEO", click = "plot_click_GEO", width = "100%", height = "400px"), color = "#45a3a4", type = 8),
p(textOutput("weighted_plot_info_GEO"), id = "weighted_plot_info_GEO", style = "text-align: left;"),
conditionalPanel(
condition = "output.cdf_graph_weighted_plot_GEO",
HTML("<br>"),
div(style = "text-align: center;", downloadButton('downloadPlot_weighted_GEO', 'Download Regional Weighted Survival Plot', class = "btn download.button")),
HTML("<br>")
)
)
)
)
),
br(),
accordion(
open = c("National Supply Figures"),
accordion_panel(
"National Supply Figures",
conditionalPanel(
condition = "input.run_analysis",
withSpinner(uiOutput("content_ui_national"), color = "#45a3a4", type = 8)
)
)
) ,
br(),
accordion(
open = c("Regional Supply Figures"),
# Area of Interest tab
accordion_panel(
"Regional Supply Figures",
conditionalPanel(
condition = "input.run_analysis",
withSpinner(uiOutput("content_ui_regional"), color = "#45a3a4", type = 8)
)
)
),
br(),
br(),
br(),
br(),
br()
)
)
),
# This will adjust the width of the sidebar and set the header color and text color
shiny::tags$head(
tags$style(HTML("
.main-sidebar {
background-color: #54585A;
}
.content-header {
background-color: #45a3a4;
}
.main-header .logo {
background-color: #45a3a4;
}
.box-title a {
color: red !important;
}
.fa-briefcase {
color:#45a3a4;
}
.fa-earth-americas {
color:#45a3a4;
}
.fa-sliders {
color:#45a3a4;
}
.bi-clipboard-data-fill {
stroke-width: 4;
color:#45a3a4;
}
.bi-envelope-fill {
color:#45a3a4;
}
.btn.btn-enabled {
background-color: #45a3a4;
border-color: #45a3a4;
color: white;
display: block; /* Corrected for proper display */
margin: 0 auto; /* Center the button horizontally */
text-align: center; /* Center the text inside the button */
}
.btn.btn-disabled {
background-color: #BBBBBB;
color: white;
display: block; /* Corrected for proper display */
margin: 0 auto; /* Center the button horizontally */
text-align: center; /* Center the text inside the button */
}
.btn.btn-default.shiny-download-link.shiny-bound-output {
background-color: #45a3a4;
border-color: #45a3a4;
color: white;
display: block;
margin: 0 auto;
width: 350px;
text-align: center;
}
.btn.btn-default {
background-color: #45a3a4;
border-color: #45a3a4;
color: white;
display: block;
margin: 0 auto;
width: auto;
max-width: 95%;
text-align: center;
}
.btn.btn-primary {
background-color: #45a3a4;
border-color: #45a3a4;
color: white;
display: block;
margin: 0 auto;
width: 300px;
text-align: center;
}
.btn.btn-doc {
background-color: #45a3a4;
border-color: #45a3a4;
color: white;
display: inline;
margin: 0 auto;
line-height: normal;
vertical-align: baseline;
text-align: center;
padding: 3px;
}
hr {
border-top: 1px solid #000000;
}
.button-container {
text-align: center;
}
.skin-blue .main-header .navbar {
background-color: #45a3a4;
}
.content-wrapper {
width: 100%;
}
.well {
border-color: #ebedef;
}
.dt-buttons {
float: none;
text-align: center;
color: red;
}
.accordion-button{
font-weight: bold;
font-size: 22px;
}
.accordion-button:not(.collapsed) {
background-color: #f7f7f7;
}
.dark-mode .accordion-button:not(.collapsed) {
background-color: #282c2f;
}
.accordion-toggle { display: flex; justify-content: space-between; align-items: center; cursor: pointer; margin-top: 5px; color: #45a3a4; padding: 10px; }
.accordion-text { flex-grow: 1; }
.accordion-icon { text-align: right; }
.myPlot {
max-width: 800px;
padding-bottom: 66.66%; /* Adjust percentage based on your aspect ratio */
position: relative;
}
.myPlot > div {
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
}
hr {
border-style: solid;
border-color: #45a3a4;
}
.shiny-progress-container {
/* Style the container of the progress bar */
}
.progress-bar {
background-color: #45a3a4; /* Change to your desired bar color */
background-image: linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
animation: progress-bar-stripes 1s linear infinite;
}
@keyframes progress-bar-stripes {
from { background-position: 1rem 0; }
to { background-position: 0 0; }
}
")),
tags$head(HTML("
<script type='text/javascript' src='keep-alive.js'></script>")),
tags$script(HTML("
$(document).ready(function() {
// Initialize tooltips
$('[data-toggle=\"tooltip\"]').tooltip();
// Set focus to the 'run_analysis' button
$('#run_analysis').focus();
});
"))
)
)
shiny::runApp('S:/wits_demo_stable_april3/wits_demo_stable')
# app.R
# Clear environment and options setup
rm(list = ls())
rm(list = ls(all = TRUE))
################################################################################
################################################################################
source("R/functions.R")
setwd("S:/wits_demo_stable_april3/wits_demo_stable")
# app.R
# Clear environment and options setup
rm(list = ls())
rm(list = ls(all = TRUE))
################################################################################
################################################################################
source("R/functions.R")
source("R/functions_modules.R")
source("R/ui_modules/sidebarModule.R")
################################################################################
################################################################################
# Placeholder for credentialling
# if (interactive() && requireNamespace("rstudioapi", quietly = TRUE)) {
#   # define some basic credentials (on data.frame)
#   credentials <- data.frame(
#     user = c("guest"), # mandatory
#     password = c("password"), # mandatory
#     start = c("2023-12-31), # optional (all others)
#     expire = c(NA),
#     admin = c(FALSE),
#     comment = "Simple and secure authentification mechanism for single ‘Shiny’ applications.",
#     stringsAsFactors = FALSE
#   ) }
################################################################################
################################################################################
subset_data_for_computation <<- "no"
subset_number <<- 250
n <- 10
################################################################################
################################################################################
title <- tags$div(
style = "display: flex; justify-content: space-between; align-items: center; padding-top: 20px;",
tags$div(
style = "display: flex; align-items: center;",
tags$img(
src = "NNCTA_logo_updated_symbol.png",
height = "62px",
width = "65px",
style = "padding-right: 10px;"
),
tags$h1(
"Workforce Insight Tool",
style = "font-weight: bold; white-space: nowrap; margin: 0;"
)
),
tags$div(
style = "display: flex; align-items: center; text",
input_dark_mode(id = "dark_mode", mode = "light", label = tags$div(style = "color: #45a3a4; display: flex; align-items: center;", HTML("Dark mode")))
)
)
# app.R
# Clear environment and options setup
rm(list = ls())
rm(list = ls(all = TRUE))
################################################################################
################################################################################
source("R/data_import_local.R")
renv::deactivate()
unlink("renv", recursive = TRUE)
file.remove("renv.lock")
renv::init()
renv::activate()
renv::update()
renv::update()
renv::outdated()
renv::snapshot()
renv::update()
shiny::runApp()
renv::restore(clean = TRUE, prompt = FALSE)
renv::snapshot()
# app.R
# Clear environment and options setup
rm(list = ls())
rm(list = ls(all = TRUE))
################################################################################
################################################################################
source("R/data_import_local.R")
library(devtools
library(devtools)
renv::deactivate()
?ggthemr
?themr
